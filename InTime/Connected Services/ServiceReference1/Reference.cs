//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InTime.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Song_Singer", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class Song_Singer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Singer_Album[] AlbumsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Singer_Album[] Albums {
            get {
                return this.AlbumsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumsField, value) != true)) {
                    this.AlbumsField = value;
                    this.RaisePropertyChanged("Albums");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagePath {
            get {
                return this.ImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagePathField, value) != true)) {
                    this.ImagePathField = value;
                    this.RaisePropertyChanged("ImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Singer_Album", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class Singer_Album : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song_Singer SingerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song[] SongsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagePath {
            get {
                return this.ImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagePathField, value) != true)) {
                    this.ImagePathField = value;
                    this.RaisePropertyChanged("ImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song_Singer Singer {
            get {
                return this.SingerField;
            }
            set {
                if ((object.ReferenceEquals(this.SingerField, value) != true)) {
                    this.SingerField = value;
                    this.RaisePropertyChanged("Singer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song[] Songs {
            get {
                return this.SongsField;
            }
            set {
                if ((object.ReferenceEquals(this.SongsField, value) != true)) {
                    this.SongsField = value;
                    this.RaisePropertyChanged("Songs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Song", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class Song : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Singer_Album AlbumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] MusicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song_Singer[] SingersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song[] SongsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalListensField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VerificationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Singer_Album Album {
            get {
                return this.AlbumField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumField, value) != true)) {
                    this.AlbumField = value;
                    this.RaisePropertyChanged("Album");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Genre {
            get {
                return this.GenreField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreField, value) != true)) {
                    this.GenreField = value;
                    this.RaisePropertyChanged("Genre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Music {
            get {
                return this.MusicField;
            }
            set {
                if ((object.ReferenceEquals(this.MusicField, value) != true)) {
                    this.MusicField = value;
                    this.RaisePropertyChanged("Music");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Path {
            get {
                return this.PathField;
            }
            set {
                if ((this.PathField.Equals(value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song_Singer[] Singers {
            get {
                return this.SingersField;
            }
            set {
                if ((object.ReferenceEquals(this.SingersField, value) != true)) {
                    this.SingersField = value;
                    this.RaisePropertyChanged("Singers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song[] Songs {
            get {
                return this.SongsField;
            }
            set {
                if ((object.ReferenceEquals(this.SongsField, value) != true)) {
                    this.SongsField = value;
                    this.RaisePropertyChanged("Songs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalListens {
            get {
                return this.TotalListensField;
            }
            set {
                if ((this.TotalListensField.Equals(value) != true)) {
                    this.TotalListensField = value;
                    this.RaisePropertyChanged("TotalListens");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Verification {
            get {
                return this.VerificationField;
            }
            set {
                if ((this.VerificationField.Equals(value) != true)) {
                    this.VerificationField = value;
                    this.RaisePropertyChanged("Verification");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client_User", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class Client_User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Client_User[] ContactsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song_Playlist[] FavoritePlaylistsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song_Playlist[] PlaylistsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Client_User[] Contacts {
            get {
                return this.ContactsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactsField, value) != true)) {
                    this.ContactsField = value;
                    this.RaisePropertyChanged("Contacts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song_Playlist[] FavoritePlaylists {
            get {
                return this.FavoritePlaylistsField;
            }
            set {
                if ((object.ReferenceEquals(this.FavoritePlaylistsField, value) != true)) {
                    this.FavoritePlaylistsField = value;
                    this.RaisePropertyChanged("FavoritePlaylists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagePath {
            get {
                return this.ImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagePathField, value) != true)) {
                    this.ImagePathField = value;
                    this.RaisePropertyChanged("ImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song_Playlist[] Playlists {
            get {
                return this.PlaylistsField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaylistsField, value) != true)) {
                    this.PlaylistsField = value;
                    this.RaisePropertyChanged("Playlists");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Song_Playlist", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class Song_Playlist : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Client_User CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CustomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song_Singer[] SingersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song[] SongsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Client_User Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Custom {
            get {
                return this.CustomField;
            }
            set {
                if ((this.CustomField.Equals(value) != true)) {
                    this.CustomField = value;
                    this.RaisePropertyChanged("Custom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagePath {
            get {
                return this.ImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagePathField, value) != true)) {
                    this.ImagePathField = value;
                    this.RaisePropertyChanged("ImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song_Singer[] Singers {
            get {
                return this.SingersField;
            }
            set {
                if ((object.ReferenceEquals(this.SingersField, value) != true)) {
                    this.SingersField = value;
                    this.RaisePropertyChanged("Singers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song[] Songs {
            get {
                return this.SongsField;
            }
            set {
                if ((object.ReferenceEquals(this.SongsField, value) != true)) {
                    this.SongsField = value;
                    this.RaisePropertyChanged("Songs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class EditFailed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Login_User", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class Login_User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class LoginFailed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class RegFailed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecoverFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class RecoverFailed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class LoadPlaylistFailed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeleteFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class DeleteFailed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class AddPlaylistFailed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchResult", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class SearchResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Singer_Album[] AlbumsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song_Playlist[] PlaylistsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Search_StrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song_Singer[] SingersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InTime.ServiceReference1.Song[] SongsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Singer_Album[] Albums {
            get {
                return this.AlbumsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumsField, value) != true)) {
                    this.AlbumsField = value;
                    this.RaisePropertyChanged("Albums");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song_Playlist[] Playlists {
            get {
                return this.PlaylistsField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaylistsField, value) != true)) {
                    this.PlaylistsField = value;
                    this.RaisePropertyChanged("Playlists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Search_Str {
            get {
                return this.Search_StrField;
            }
            set {
                if ((object.ReferenceEquals(this.Search_StrField, value) != true)) {
                    this.Search_StrField = value;
                    this.RaisePropertyChanged("Search_Str");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song_Singer[] Singers {
            get {
                return this.SingersField;
            }
            set {
                if ((object.ReferenceEquals(this.SingersField, value) != true)) {
                    this.SingersField = value;
                    this.RaisePropertyChanged("Singers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InTime.ServiceReference1.Song[] Songs {
            get {
                return this.SongsField;
            }
            set {
                if ((object.ReferenceEquals(this.SongsField, value) != true)) {
                    this.SongsField = value;
                    this.RaisePropertyChanged("Songs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewSinger", ReplyAction="http://tempuri.org/IService1/AddNewSingerResponse")]
        void AddNewSinger(InTime.ServiceReference1.Song_Singer NewSinger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewSinger", ReplyAction="http://tempuri.org/IService1/AddNewSingerResponse")]
        System.Threading.Tasks.Task AddNewSingerAsync(InTime.ServiceReference1.Song_Singer NewSinger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewTrack", ReplyAction="http://tempuri.org/IService1/AddNewTrackResponse")]
        void AddNewTrack(InTime.ServiceReference1.Song NewSong);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewTrack", ReplyAction="http://tempuri.org/IService1/AddNewTrackResponse")]
        System.Threading.Tasks.Task AddNewTrackAsync(InTime.ServiceReference1.Song NewSong);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewAlbum", ReplyAction="http://tempuri.org/IService1/AddNewAlbumResponse")]
        void AddNewAlbum(InTime.ServiceReference1.Singer_Album NewAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewAlbum", ReplyAction="http://tempuri.org/IService1/AddNewAlbumResponse")]
        System.Threading.Tasks.Task AddNewAlbumAsync(InTime.ServiceReference1.Singer_Album NewAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditProfile", ReplyAction="http://tempuri.org/IService1/EditProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.EditFailed), Action="http://tempuri.org/IService1/EditProfileEditFailedFault", Name="EditFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        bool EditProfile(InTime.ServiceReference1.Client_User profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditProfile", ReplyAction="http://tempuri.org/IService1/EditProfileResponse")]
        System.Threading.Tasks.Task<bool> EditProfileAsync(InTime.ServiceReference1.Client_User profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TryLogin", ReplyAction="http://tempuri.org/IService1/TryLoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoginFailed), Action="http://tempuri.org/IService1/TryLoginLoginFailedFault", Name="LoginFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Client_User TryLogin(InTime.ServiceReference1.Login_User login_User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TryLogin", ReplyAction="http://tempuri.org/IService1/TryLoginResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Client_User> TryLoginAsync(InTime.ServiceReference1.Login_User login_User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegNewUser", ReplyAction="http://tempuri.org/IService1/RegNewUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.RegFailed), Action="http://tempuri.org/IService1/RegNewUserRegFailedFault", Name="RegFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Client_User RegNewUser(InTime.ServiceReference1.Login_User login_User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegNewUser", ReplyAction="http://tempuri.org/IService1/RegNewUserResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Client_User> RegNewUserAsync(InTime.ServiceReference1.Login_User login_User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecoverPassCodeRequest", ReplyAction="http://tempuri.org/IService1/RecoverPassCodeRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.RecoverFailed), Action="http://tempuri.org/IService1/RecoverPassCodeRequestRecoverFailedFault", Name="RecoverFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        bool RecoverPassCodeRequest(InTime.ServiceReference1.Login_User login_User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecoverPassCodeRequest", ReplyAction="http://tempuri.org/IService1/RecoverPassCodeRequestResponse")]
        System.Threading.Tasks.Task<bool> RecoverPassCodeRequestAsync(InTime.ServiceReference1.Login_User login_User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecoverPassCodeCheck", ReplyAction="http://tempuri.org/IService1/RecoverPassCodeCheckResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.RecoverFailed), Action="http://tempuri.org/IService1/RecoverPassCodeCheckRecoverFailedFault", Name="RecoverFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        bool RecoverPassCodeCheck(InTime.ServiceReference1.Login_User login_User, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecoverPassCodeCheck", ReplyAction="http://tempuri.org/IService1/RecoverPassCodeCheckResponse")]
        System.Threading.Tasks.Task<bool> RecoverPassCodeCheckAsync(InTime.ServiceReference1.Login_User login_User, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangePassword", ReplyAction="http://tempuri.org/IService1/ChangePasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.RecoverFailed), Action="http://tempuri.org/IService1/ChangePasswordRecoverFailedFault", Name="RecoverFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        bool ChangePassword(InTime.ServiceReference1.Login_User login_User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangePassword", ReplyAction="http://tempuri.org/IService1/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(InTime.ServiceReference1.Login_User login_User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAlbum", ReplyAction="http://tempuri.org/IService1/GetAlbumResponse")]
        InTime.ServiceReference1.Singer_Album GetAlbum(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAlbum", ReplyAction="http://tempuri.org/IService1/GetAlbumResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Singer_Album> GetAlbumAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTrack", ReplyAction="http://tempuri.org/IService1/GetTrackResponse")]
        byte[] GetTrack(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTrack", ReplyAction="http://tempuri.org/IService1/GetTrackResponse")]
        System.Threading.Tasks.Task<byte[]> GetTrackAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAlbumImage", ReplyAction="http://tempuri.org/IService1/GetAlbumImageResponse")]
        byte[] GetAlbumImage(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAlbumImage", ReplyAction="http://tempuri.org/IService1/GetAlbumImageResponse")]
        System.Threading.Tasks.Task<byte[]> GetAlbumImageAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRecentlyPlayed", ReplyAction="http://tempuri.org/IService1/GetRecentlyPlayedResponse")]
        InTime.ServiceReference1.Song_Playlist GetRecentlyPlayed(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRecentlyPlayed", ReplyAction="http://tempuri.org/IService1/GetRecentlyPlayedResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> GetRecentlyPlayedAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlaylistByID", ReplyAction="http://tempuri.org/IService1/GetPlaylistByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/GetPlaylistByIDLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist GetPlaylistByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlaylistByID", ReplyAction="http://tempuri.org/IService1/GetPlaylistByIDResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> GetPlaylistByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlaylistInfoByID", ReplyAction="http://tempuri.org/IService1/GetPlaylistInfoByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/GetPlaylistInfoByIDLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist GetPlaylistInfoByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlaylistInfoByID", ReplyAction="http://tempuri.org/IService1/GetPlaylistInfoByIDResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> GetPlaylistInfoByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFavoriteTracksPlaylist", ReplyAction="http://tempuri.org/IService1/GetFavoriteTracksPlaylistResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/GetFavoriteTracksPlaylistLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist GetFavoriteTracksPlaylist(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFavoriteTracksPlaylist", ReplyAction="http://tempuri.org/IService1/GetFavoriteTracksPlaylistResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> GetFavoriteTracksPlaylistAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFavoritePlaylists", ReplyAction="http://tempuri.org/IService1/GetFavoritePlaylistsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/GetFavoritePlaylistsLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist[] GetFavoritePlaylists(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFavoritePlaylists", ReplyAction="http://tempuri.org/IService1/GetFavoritePlaylistsResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetFavoritePlaylistsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingerFull", ReplyAction="http://tempuri.org/IService1/GetSingerFullResponse")]
        InTime.ServiceReference1.Song_Singer GetSingerFull(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingerFull", ReplyAction="http://tempuri.org/IService1/GetSingerFullResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Singer> GetSingerFullAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlaylistToFavorite", ReplyAction="http://tempuri.org/IService1/AddPlaylistToFavoriteResponse")]
        bool AddPlaylistToFavorite(int userID, int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlaylistToFavorite", ReplyAction="http://tempuri.org/IService1/AddPlaylistToFavoriteResponse")]
        System.Threading.Tasks.Task<bool> AddPlaylistToFavoriteAsync(int userID, int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTrackToFavorite", ReplyAction="http://tempuri.org/IService1/AddTrackToFavoriteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/AddTrackToFavoriteLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        bool AddTrackToFavorite(int userID, int trackID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTrackToFavorite", ReplyAction="http://tempuri.org/IService1/AddTrackToFavoriteResponse")]
        System.Threading.Tasks.Task<bool> AddTrackToFavoriteAsync(int userID, int trackID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddAlbumToFavorite", ReplyAction="http://tempuri.org/IService1/AddAlbumToFavoriteResponse")]
        bool AddAlbumToFavorite(int userID, int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddAlbumToFavorite", ReplyAction="http://tempuri.org/IService1/AddAlbumToFavoriteResponse")]
        System.Threading.Tasks.Task<bool> AddAlbumToFavoriteAsync(int userID, int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CloneAlbumToFavoritePlaylist", ReplyAction="http://tempuri.org/IService1/CloneAlbumToFavoritePlaylistResponse")]
        bool CloneAlbumToFavoritePlaylist(int userID, int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CloneAlbumToFavoritePlaylist", ReplyAction="http://tempuri.org/IService1/CloneAlbumToFavoritePlaylistResponse")]
        System.Threading.Tasks.Task<bool> CloneAlbumToFavoritePlaylistAsync(int userID, int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ClonePlaylistToFavoritePlaylist", ReplyAction="http://tempuri.org/IService1/ClonePlaylistToFavoritePlaylistResponse")]
        bool ClonePlaylistToFavoritePlaylist(int userID, int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ClonePlaylistToFavoritePlaylist", ReplyAction="http://tempuri.org/IService1/ClonePlaylistToFavoritePlaylistResponse")]
        System.Threading.Tasks.Task<bool> ClonePlaylistToFavoritePlaylistAsync(int userID, int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveFromPlaylistFavorite", ReplyAction="http://tempuri.org/IService1/RemoveFromPlaylistFavoriteResponse")]
        bool RemoveFromPlaylistFavorite(int userID, int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveFromPlaylistFavorite", ReplyAction="http://tempuri.org/IService1/RemoveFromPlaylistFavoriteResponse")]
        System.Threading.Tasks.Task<bool> RemoveFromPlaylistFavoriteAsync(int userID, int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveFromTrackFavorite", ReplyAction="http://tempuri.org/IService1/RemoveFromTrackFavoriteResponse")]
        bool RemoveFromTrackFavorite(int userID, int trackID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveFromTrackFavorite", ReplyAction="http://tempuri.org/IService1/RemoveFromTrackFavoriteResponse")]
        System.Threading.Tasks.Task<bool> RemoveFromTrackFavoriteAsync(int userID, int trackID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemovePlaylist", ReplyAction="http://tempuri.org/IService1/RemovePlaylistResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.DeleteFailed), Action="http://tempuri.org/IService1/RemovePlaylistDeleteFailedFault", Name="DeleteFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        bool RemovePlaylist(int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemovePlaylist", ReplyAction="http://tempuri.org/IService1/RemovePlaylistResponse")]
        System.Threading.Tasks.Task<bool> RemovePlaylistAsync(int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserPlaylistsInfo", ReplyAction="http://tempuri.org/IService1/GetUserPlaylistsInfoResponse")]
        InTime.ServiceReference1.Song_Playlist[] GetUserPlaylistsInfo(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserPlaylistsInfo", ReplyAction="http://tempuri.org/IService1/GetUserPlaylistsInfoResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetUserPlaylistsInfoAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserFavoritePlaylistsInfo", ReplyAction="http://tempuri.org/IService1/GetUserFavoritePlaylistsInfoResponse")]
        InTime.ServiceReference1.Song_Playlist[] GetUserFavoritePlaylistsInfo(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserFavoritePlaylistsInfo", ReplyAction="http://tempuri.org/IService1/GetUserFavoritePlaylistsInfoResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetUserFavoritePlaylistsInfoAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllSingers", ReplyAction="http://tempuri.org/IService1/GetAllSingersResponse")]
        InTime.ServiceReference1.Song_Singer[] GetAllSingers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllSingers", ReplyAction="http://tempuri.org/IService1/GetAllSingersResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Singer[]> GetAllSingersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRockToday", ReplyAction="http://tempuri.org/IService1/GetRockTodayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/GetRockTodayLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist[] GetRockToday();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRockToday", ReplyAction="http://tempuri.org/IService1/GetRockTodayResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetRockTodayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPopToday", ReplyAction="http://tempuri.org/IService1/GetPopTodayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/GetPopTodayLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist[] GetPopToday();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPopToday", ReplyAction="http://tempuri.org/IService1/GetPopTodayResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetPopTodayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHouseToday", ReplyAction="http://tempuri.org/IService1/GetHouseTodayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/GetHouseTodayLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist[] GetHouseToday();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHouseToday", ReplyAction="http://tempuri.org/IService1/GetHouseTodayResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetHouseTodayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTrackStream", ReplyAction="http://tempuri.org/IService1/GetTrackStreamResponse")]
        System.IO.Stream GetTrackStream(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTrackStream", ReplyAction="http://tempuri.org/IService1/GetTrackStreamResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetTrackStreamAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TempFunc", ReplyAction="http://tempuri.org/IService1/TempFuncResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoginFailed), Action="http://tempuri.org/IService1/TempFuncLoginFailedFault", Name="LoginFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist TempFunc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TempFunc", ReplyAction="http://tempuri.org/IService1/TempFuncResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> TempFuncAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlaylist", ReplyAction="http://tempuri.org/IService1/AddPlaylistResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.AddPlaylistFailed), Action="http://tempuri.org/IService1/AddPlaylistAddPlaylistFailedFault", Name="AddPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist AddPlaylist(InTime.ServiceReference1.Song_Playlist new_Playlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlaylist", ReplyAction="http://tempuri.org/IService1/AddPlaylistResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> AddPlaylistAsync(InTime.ServiceReference1.Song_Playlist new_Playlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddGenrePlaylist", ReplyAction="http://tempuri.org/IService1/AddGenrePlaylistResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.AddPlaylistFailed), Action="http://tempuri.org/IService1/AddGenrePlaylistAddPlaylistFailedFault", Name="AddPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist AddGenrePlaylist(InTime.ServiceReference1.Song_Playlist new_Playlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddGenrePlaylist", ReplyAction="http://tempuri.org/IService1/AddGenrePlaylistResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> AddGenrePlaylistAsync(InTime.ServiceReference1.Song_Playlist new_Playlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search_GetAllSongs", ReplyAction="http://tempuri.org/IService1/Search_GetAllSongsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/Search_GetAllSongsLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist Search_GetAllSongs(string search_str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search_GetAllSongs", ReplyAction="http://tempuri.org/IService1/Search_GetAllSongsResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> Search_GetAllSongsAsync(string search_str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search_GetAllSongSingers", ReplyAction="http://tempuri.org/IService1/Search_GetAllSongSingersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/Search_GetAllSongSingersLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Singer[] Search_GetAllSongSingers(string search_str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search_GetAllSongSingers", ReplyAction="http://tempuri.org/IService1/Search_GetAllSongSingersResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Singer[]> Search_GetAllSongSingersAsync(string search_str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search_GetAllSingerAlbums", ReplyAction="http://tempuri.org/IService1/Search_GetAllSingerAlbumsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/Search_GetAllSingerAlbumsLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Singer_Album[] Search_GetAllSingerAlbums(string search_str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search_GetAllSingerAlbums", ReplyAction="http://tempuri.org/IService1/Search_GetAllSingerAlbumsResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Singer_Album[]> Search_GetAllSingerAlbumsAsync(string search_str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search_GetAllPlaylists", ReplyAction="http://tempuri.org/IService1/Search_GetAllPlaylistsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(InTime.ServiceReference1.LoadPlaylistFailed), Action="http://tempuri.org/IService1/Search_GetAllPlaylistsLoadPlaylistFailedFault", Name="LoadPlaylistFailed", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
        InTime.ServiceReference1.Song_Playlist[] Search_GetAllPlaylists(string search_str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search_GetAllPlaylists", ReplyAction="http://tempuri.org/IService1/Search_GetAllPlaylistsResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> Search_GetAllPlaylistsAsync(string search_str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSongToPlaylist", ReplyAction="http://tempuri.org/IService1/AddSongToPlaylistResponse")]
        bool AddSongToPlaylist(int songID, int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSongToPlaylist", ReplyAction="http://tempuri.org/IService1/AddSongToPlaylistResponse")]
        System.Threading.Tasks.Task<bool> AddSongToPlaylistAsync(int songID, int playlistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePlaylist", ReplyAction="http://tempuri.org/IService1/DeletePlaylistResponse")]
        bool DeletePlaylist(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePlaylist", ReplyAction="http://tempuri.org/IService1/DeletePlaylistResponse")]
        System.Threading.Tasks.Task<bool> DeletePlaylistAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/tmp", ReplyAction="http://tempuri.org/IService1/tmpResponse")]
        void tmp(byte[] img);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/tmp", ReplyAction="http://tempuri.org/IService1/tmpResponse")]
        System.Threading.Tasks.Task tmpAsync(byte[] img);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search", ReplyAction="http://tempuri.org/IService1/SearchResponse")]
        InTime.ServiceReference1.SearchResult Search(string searchStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search", ReplyAction="http://tempuri.org/IService1/SearchResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.SearchResult> SearchAsync(string searchStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/playlist", ReplyAction="http://tempuri.org/IService1/playlistResponse")]
        InTime.ServiceReference1.Song_Playlist playlist(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/playlist", ReplyAction="http://tempuri.org/IService1/playlistResponse")]
        System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> playlistAsync(int ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : InTime.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<InTime.ServiceReference1.IService1>, InTime.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddNewSinger(InTime.ServiceReference1.Song_Singer NewSinger) {
            base.Channel.AddNewSinger(NewSinger);
        }
        
        public System.Threading.Tasks.Task AddNewSingerAsync(InTime.ServiceReference1.Song_Singer NewSinger) {
            return base.Channel.AddNewSingerAsync(NewSinger);
        }
        
        public void AddNewTrack(InTime.ServiceReference1.Song NewSong) {
            base.Channel.AddNewTrack(NewSong);
        }
        
        public System.Threading.Tasks.Task AddNewTrackAsync(InTime.ServiceReference1.Song NewSong) {
            return base.Channel.AddNewTrackAsync(NewSong);
        }
        
        public void AddNewAlbum(InTime.ServiceReference1.Singer_Album NewAlbum) {
            base.Channel.AddNewAlbum(NewAlbum);
        }
        
        public System.Threading.Tasks.Task AddNewAlbumAsync(InTime.ServiceReference1.Singer_Album NewAlbum) {
            return base.Channel.AddNewAlbumAsync(NewAlbum);
        }
        
        public bool EditProfile(InTime.ServiceReference1.Client_User profile) {
            return base.Channel.EditProfile(profile);
        }
        
        public System.Threading.Tasks.Task<bool> EditProfileAsync(InTime.ServiceReference1.Client_User profile) {
            return base.Channel.EditProfileAsync(profile);
        }
        
        public InTime.ServiceReference1.Client_User TryLogin(InTime.ServiceReference1.Login_User login_User) {
            return base.Channel.TryLogin(login_User);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Client_User> TryLoginAsync(InTime.ServiceReference1.Login_User login_User) {
            return base.Channel.TryLoginAsync(login_User);
        }
        
        public InTime.ServiceReference1.Client_User RegNewUser(InTime.ServiceReference1.Login_User login_User) {
            return base.Channel.RegNewUser(login_User);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Client_User> RegNewUserAsync(InTime.ServiceReference1.Login_User login_User) {
            return base.Channel.RegNewUserAsync(login_User);
        }
        
        public bool RecoverPassCodeRequest(InTime.ServiceReference1.Login_User login_User) {
            return base.Channel.RecoverPassCodeRequest(login_User);
        }
        
        public System.Threading.Tasks.Task<bool> RecoverPassCodeRequestAsync(InTime.ServiceReference1.Login_User login_User) {
            return base.Channel.RecoverPassCodeRequestAsync(login_User);
        }
        
        public bool RecoverPassCodeCheck(InTime.ServiceReference1.Login_User login_User, string code) {
            return base.Channel.RecoverPassCodeCheck(login_User, code);
        }
        
        public System.Threading.Tasks.Task<bool> RecoverPassCodeCheckAsync(InTime.ServiceReference1.Login_User login_User, string code) {
            return base.Channel.RecoverPassCodeCheckAsync(login_User, code);
        }
        
        public bool ChangePassword(InTime.ServiceReference1.Login_User login_User) {
            return base.Channel.ChangePassword(login_User);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(InTime.ServiceReference1.Login_User login_User) {
            return base.Channel.ChangePasswordAsync(login_User);
        }
        
        public InTime.ServiceReference1.Singer_Album GetAlbum(int ID) {
            return base.Channel.GetAlbum(ID);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Singer_Album> GetAlbumAsync(int ID) {
            return base.Channel.GetAlbumAsync(ID);
        }
        
        public byte[] GetTrack(int ID) {
            return base.Channel.GetTrack(ID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetTrackAsync(int ID) {
            return base.Channel.GetTrackAsync(ID);
        }
        
        public byte[] GetAlbumImage(int ID) {
            return base.Channel.GetAlbumImage(ID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetAlbumImageAsync(int ID) {
            return base.Channel.GetAlbumImageAsync(ID);
        }
        
        public InTime.ServiceReference1.Song_Playlist GetRecentlyPlayed(int ID) {
            return base.Channel.GetRecentlyPlayed(ID);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> GetRecentlyPlayedAsync(int ID) {
            return base.Channel.GetRecentlyPlayedAsync(ID);
        }
        
        public InTime.ServiceReference1.Song_Playlist GetPlaylistByID(int ID) {
            return base.Channel.GetPlaylistByID(ID);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> GetPlaylistByIDAsync(int ID) {
            return base.Channel.GetPlaylistByIDAsync(ID);
        }
        
        public InTime.ServiceReference1.Song_Playlist GetPlaylistInfoByID(int ID) {
            return base.Channel.GetPlaylistInfoByID(ID);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> GetPlaylistInfoByIDAsync(int ID) {
            return base.Channel.GetPlaylistInfoByIDAsync(ID);
        }
        
        public InTime.ServiceReference1.Song_Playlist GetFavoriteTracksPlaylist(int userID) {
            return base.Channel.GetFavoriteTracksPlaylist(userID);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> GetFavoriteTracksPlaylistAsync(int userID) {
            return base.Channel.GetFavoriteTracksPlaylistAsync(userID);
        }
        
        public InTime.ServiceReference1.Song_Playlist[] GetFavoritePlaylists(int userID) {
            return base.Channel.GetFavoritePlaylists(userID);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetFavoritePlaylistsAsync(int userID) {
            return base.Channel.GetFavoritePlaylistsAsync(userID);
        }
        
        public InTime.ServiceReference1.Song_Singer GetSingerFull(int ID) {
            return base.Channel.GetSingerFull(ID);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Singer> GetSingerFullAsync(int ID) {
            return base.Channel.GetSingerFullAsync(ID);
        }
        
        public bool AddPlaylistToFavorite(int userID, int playlistID) {
            return base.Channel.AddPlaylistToFavorite(userID, playlistID);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlaylistToFavoriteAsync(int userID, int playlistID) {
            return base.Channel.AddPlaylistToFavoriteAsync(userID, playlistID);
        }
        
        public bool AddTrackToFavorite(int userID, int trackID) {
            return base.Channel.AddTrackToFavorite(userID, trackID);
        }
        
        public System.Threading.Tasks.Task<bool> AddTrackToFavoriteAsync(int userID, int trackID) {
            return base.Channel.AddTrackToFavoriteAsync(userID, trackID);
        }
        
        public bool AddAlbumToFavorite(int userID, int playlistID) {
            return base.Channel.AddAlbumToFavorite(userID, playlistID);
        }
        
        public System.Threading.Tasks.Task<bool> AddAlbumToFavoriteAsync(int userID, int playlistID) {
            return base.Channel.AddAlbumToFavoriteAsync(userID, playlistID);
        }
        
        public bool CloneAlbumToFavoritePlaylist(int userID, int albumID) {
            return base.Channel.CloneAlbumToFavoritePlaylist(userID, albumID);
        }
        
        public System.Threading.Tasks.Task<bool> CloneAlbumToFavoritePlaylistAsync(int userID, int albumID) {
            return base.Channel.CloneAlbumToFavoritePlaylistAsync(userID, albumID);
        }
        
        public bool ClonePlaylistToFavoritePlaylist(int userID, int playlistID) {
            return base.Channel.ClonePlaylistToFavoritePlaylist(userID, playlistID);
        }
        
        public System.Threading.Tasks.Task<bool> ClonePlaylistToFavoritePlaylistAsync(int userID, int playlistID) {
            return base.Channel.ClonePlaylistToFavoritePlaylistAsync(userID, playlistID);
        }
        
        public bool RemoveFromPlaylistFavorite(int userID, int playlistID) {
            return base.Channel.RemoveFromPlaylistFavorite(userID, playlistID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFromPlaylistFavoriteAsync(int userID, int playlistID) {
            return base.Channel.RemoveFromPlaylistFavoriteAsync(userID, playlistID);
        }
        
        public bool RemoveFromTrackFavorite(int userID, int trackID) {
            return base.Channel.RemoveFromTrackFavorite(userID, trackID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFromTrackFavoriteAsync(int userID, int trackID) {
            return base.Channel.RemoveFromTrackFavoriteAsync(userID, trackID);
        }
        
        public bool RemovePlaylist(int playlistID) {
            return base.Channel.RemovePlaylist(playlistID);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePlaylistAsync(int playlistID) {
            return base.Channel.RemovePlaylistAsync(playlistID);
        }
        
        public InTime.ServiceReference1.Song_Playlist[] GetUserPlaylistsInfo(int userID) {
            return base.Channel.GetUserPlaylistsInfo(userID);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetUserPlaylistsInfoAsync(int userID) {
            return base.Channel.GetUserPlaylistsInfoAsync(userID);
        }
        
        public InTime.ServiceReference1.Song_Playlist[] GetUserFavoritePlaylistsInfo(int userID) {
            return base.Channel.GetUserFavoritePlaylistsInfo(userID);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetUserFavoritePlaylistsInfoAsync(int userID) {
            return base.Channel.GetUserFavoritePlaylistsInfoAsync(userID);
        }
        
        public InTime.ServiceReference1.Song_Singer[] GetAllSingers() {
            return base.Channel.GetAllSingers();
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Singer[]> GetAllSingersAsync() {
            return base.Channel.GetAllSingersAsync();
        }
        
        public InTime.ServiceReference1.Song_Playlist[] GetRockToday() {
            return base.Channel.GetRockToday();
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetRockTodayAsync() {
            return base.Channel.GetRockTodayAsync();
        }
        
        public InTime.ServiceReference1.Song_Playlist[] GetPopToday() {
            return base.Channel.GetPopToday();
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetPopTodayAsync() {
            return base.Channel.GetPopTodayAsync();
        }
        
        public InTime.ServiceReference1.Song_Playlist[] GetHouseToday() {
            return base.Channel.GetHouseToday();
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> GetHouseTodayAsync() {
            return base.Channel.GetHouseTodayAsync();
        }
        
        public System.IO.Stream GetTrackStream(int ID) {
            return base.Channel.GetTrackStream(ID);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetTrackStreamAsync(int ID) {
            return base.Channel.GetTrackStreamAsync(ID);
        }
        
        public InTime.ServiceReference1.Song_Playlist TempFunc() {
            return base.Channel.TempFunc();
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> TempFuncAsync() {
            return base.Channel.TempFuncAsync();
        }
        
        public InTime.ServiceReference1.Song_Playlist AddPlaylist(InTime.ServiceReference1.Song_Playlist new_Playlist) {
            return base.Channel.AddPlaylist(new_Playlist);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> AddPlaylistAsync(InTime.ServiceReference1.Song_Playlist new_Playlist) {
            return base.Channel.AddPlaylistAsync(new_Playlist);
        }
        
        public InTime.ServiceReference1.Song_Playlist AddGenrePlaylist(InTime.ServiceReference1.Song_Playlist new_Playlist) {
            return base.Channel.AddGenrePlaylist(new_Playlist);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> AddGenrePlaylistAsync(InTime.ServiceReference1.Song_Playlist new_Playlist) {
            return base.Channel.AddGenrePlaylistAsync(new_Playlist);
        }
        
        public InTime.ServiceReference1.Song_Playlist Search_GetAllSongs(string search_str) {
            return base.Channel.Search_GetAllSongs(search_str);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> Search_GetAllSongsAsync(string search_str) {
            return base.Channel.Search_GetAllSongsAsync(search_str);
        }
        
        public InTime.ServiceReference1.Song_Singer[] Search_GetAllSongSingers(string search_str) {
            return base.Channel.Search_GetAllSongSingers(search_str);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Singer[]> Search_GetAllSongSingersAsync(string search_str) {
            return base.Channel.Search_GetAllSongSingersAsync(search_str);
        }
        
        public InTime.ServiceReference1.Singer_Album[] Search_GetAllSingerAlbums(string search_str) {
            return base.Channel.Search_GetAllSingerAlbums(search_str);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Singer_Album[]> Search_GetAllSingerAlbumsAsync(string search_str) {
            return base.Channel.Search_GetAllSingerAlbumsAsync(search_str);
        }
        
        public InTime.ServiceReference1.Song_Playlist[] Search_GetAllPlaylists(string search_str) {
            return base.Channel.Search_GetAllPlaylists(search_str);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist[]> Search_GetAllPlaylistsAsync(string search_str) {
            return base.Channel.Search_GetAllPlaylistsAsync(search_str);
        }
        
        public bool AddSongToPlaylist(int songID, int playlistID) {
            return base.Channel.AddSongToPlaylist(songID, playlistID);
        }
        
        public System.Threading.Tasks.Task<bool> AddSongToPlaylistAsync(int songID, int playlistID) {
            return base.Channel.AddSongToPlaylistAsync(songID, playlistID);
        }
        
        public bool DeletePlaylist(int ID) {
            return base.Channel.DeletePlaylist(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlaylistAsync(int ID) {
            return base.Channel.DeletePlaylistAsync(ID);
        }
        
        public void tmp(byte[] img) {
            base.Channel.tmp(img);
        }
        
        public System.Threading.Tasks.Task tmpAsync(byte[] img) {
            return base.Channel.tmpAsync(img);
        }
        
        public InTime.ServiceReference1.SearchResult Search(string searchStr) {
            return base.Channel.Search(searchStr);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.SearchResult> SearchAsync(string searchStr) {
            return base.Channel.SearchAsync(searchStr);
        }
        
        public InTime.ServiceReference1.Song_Playlist playlist(int ID) {
            return base.Channel.playlist(ID);
        }
        
        public System.Threading.Tasks.Task<InTime.ServiceReference1.Song_Playlist> playlistAsync(int ID) {
            return base.Channel.playlistAsync(ID);
        }
    }
}
